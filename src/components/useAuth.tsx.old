import { httpClient } from '..//utils/HttpClient'
import Keycloak from 'keycloak-js'

const useAuth = async (kc: Keycloak) => {
    let p = new Promise(function (resolve, reject) {
        if (!kc.authenticated) {
            kc.init({
                onLoad: 'login-required', // Supported values: 'check-sso' , 'login-required'
                checkLoginIframe: true
            }).then((auth) => {
                if (!auth) {
                    window.location.reload();
                    reject(false)
                } else {
                    /* Remove below logs if you are using this on production */
                    console.info("Authenticated");
                    console.log('auth', auth)
                    console.log('Keycloak', kc)
                    console.log('Access Token', kc != undefined ? kc.token : " undefined")

                    /* http client will use this header in every request it sends */
                    if (kc) httpClient.defaults.headers.common['Authorization'] = `Bearer ${kc.token}`;

                    if (kc) {
                        kc.onTokenExpired = () => {
                            console.log('token expired')
                        }
                    }
                    resolve(true)
                }
            }, () => {
                /* Notify the user if necessary */
                console.error("Authentication Failed");
                reject(false)
            });
        }
    })

    return await p

}

export default useAuth